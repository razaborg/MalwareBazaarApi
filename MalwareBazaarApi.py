#!/usr/bin/env python3
from MalwareBazaarException import *
import requests
import json
import io

class MalwareBazaarApi:
	def __init__(self, api_key='', ssl_verify=True):
		assert(len(api_key)>0)
		self._api_key=api_key
		self._headers = { 'API-KEY': self._api_key }
		self._params = {}
		self.ssl_verify=ssl_verify

	def get_recent(self, time):
		assert(isinstance(time, int))
		self._params['query'] = 'get_recent'
		self._params['selector'] = time
		data = self._requests()
		return data		
	
	def get_file(self, sha256_hash=''):
		assert(isinstance(sha256_hash, str))
		self._params['query'] = 'get_file'
		self._params['sha256_hash'] = sha256_hash
		data = self._requests(raw=True)
		return data

	def download_file(self, sha256_hash='', dest=''):
		assert(isinstance(dest, str))
		dataIO = self.get_file(sha256_hash)
		assert(dataIO)
		with dataIO as web_in:
			with open(f'{dest}/{sha256_hash}.zip', 'wb') as f:
				f.write(web_in.read())

	def _requests(self, raw=False):
		assert(self._params)
		assert(self._headers)
		if raw :
			r = requests.post('https://mb-api.abuse.ch/api/v1/', stream=True, \
				data=self._params, timeout=15, headers=self._headers, verify=self.ssl_verify)
		else:
			r = requests.post('https://mb-api.abuse.ch/api/v1/', stream=True, \
				data=self._params, timeout=15, headers=self._headers, verify=self.ssl_verify)
		# http error check
		if not r.status_code == 200:
			raise MalwareBazaarHTTPerror()
		
		# if raw data (binary)
		if raw:
			return io.BytesIO(r.content)
		
		# otherwise, return json content
		data = r.json()
		if not data['query_status'] == 'ok':
			raise MalwareBazaarResponseError()
		return data



if __name__ == '__main__':
	# the magic part ;-)
	with open('api_key') as f:
		api_key=f.readline()[:-1]

	mb = MalwareBazaarApi(api_key, ssl_verify=False)
	#mb.get_recent(100)
	#data = mb.get_file(sha256_hash='094fd325049b8a9cf6d3e5ef2a6d4cc6a567d7d49c35f8bb8dd9e3c6acf3d78d')
	mb.download_file(sha256_hash='094fd325049b8a9cf6d3e5ef2a6d4cc6a567d7d49c35f8bb8dd9e3c6acf3d78d', dest='out')
