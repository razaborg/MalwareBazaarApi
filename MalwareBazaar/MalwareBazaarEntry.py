#!/usr/bin/env python3
import json

class MalwareBazaarEntry:
	def __init__(self, **kwargs):	
		self.properties = kwargs

	@property
	def sha256_hash(self):
		'''SHA256 hash of the malware sample'''
		return self.properties['sha256_hash']
	@property
	def sha1_hash(self):
		'''SHA1 hash of the malware sample'''
		return self.properties['sha1_hash']
	@property
	def md5_hash(self):
		'''MD5 hash of the malware sample'''
		return self.properties['md5_hash']
	@property
	def first_seen(self):
		'''TS when the file has been first seen by MalwareBazaar (UTC)'''
		return self.properties['first_seen']
	@property
	def last_seen(self):
		'''TS when the file has been last seen by MalwareBazaar (UTC)'''
		return self.properties['last_seen']
	@property
	def file_name(self):
		'''Malware sample's file name'''
		return self.properties['file_name']
	@property
	def file_size(self):
		'''File size in bytes'''
		return self.properties['file_size']
	@property
	def file_type_mime(self):
		'''File MIME type'''
		return self.properties['file_type_mime']
	@property
	def file_type(self):
		'''File Type'''
		return self.properties['file_type']
	@property
	def reporter(self):
		'''Twitter handle of the report (or anonymous for anonymous submissions)'''
		return self.properties['reporter']
	@property
	def anonymous(self):
		'''1 (true) or 0 (false)'''
		return self.properties['anonymous']
	@property
	def signature(self):
		'''Malware family (if available)'''
		return self.properties['signature']
	@property
	def imphash(self):
		'''imphash (only available for PE executables)'''
		return self.properties['imphash']
	@property
	def tlsh(self):
		'''Trend Micro Locality Sensitive Hash (tlsh)'''
		return self.properties['tlsh']
	@property
	def ssdeep(self):
		'''ssdeep'''
		return self.properties['ssdeep']
	@property
	def tags(self):
		'''List of tags'''
		return self.properties['tags']
	@property
	def intelligence(self):
		'''Dictionnary of intelligence data:
			- clamav: ClamAV detection (offical and unofficial rules)
			- downloads: number (int) of downloads from MalwareBazaar
			- uploads: number (int) of uploads to MalwareBazaar
			- mail: Mail intelligence using spamtrap data
		'''
		return self.properties['intelligence']

	def __repr__(self, indent=False):
		out = 'MalwareBazaarEntry('
		if indent:
			out += '\n'
		for k,v in self.properties.items():
			if not indent:
				out += f'{k}={repr(v)}, '
			else:
				out += f'  {k}={repr(v)},\n'
		if not indent: out = out[:-2]		
		out += ')'
		return out

	def to_json(self):
		'''Return the json representation of the object'''
		return json.dumps(self.properties)

	def __str__(self):
		return self.__repr__(indent=True)

