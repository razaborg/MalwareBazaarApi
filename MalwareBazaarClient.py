#!/usr/bin/env python3
from MalwareBazaarException import *
from MalwareBazaarEntry import *
import requests
import json
import io

class MalwareBazaarClient:
	def __init__(self, api_key='', ssl_verify=True):
		'''
		A MalwareBazaar API wrapper in Python3.
		:param api_key: Your API key
		:type api_key: str()
		:param ssl_verify: Enable/Disable SSL checks
		:type ssl_verify: bool()
		'''
		assert(len(api_key)>0)
		self._api_key=api_key
		self._headers = { 'API-KEY': self._api_key }
		self._params = {}
		self.ssl_verify=ssl_verify

	def get_recent(self, time=100):
		'''
		[Official] Query latest malware samples.
		:param time: Get the latest N additions. 
		:type time: int()
		:return: A Python list of MalwareBazaarEntry objects
		:rtype: list()
		'''

		self._params['query'] = 'get_recent'
		self._params['selector'] = time
		data = self._requests()
		return [MalwareBazaarEntry(**entry) for entry in data]
	
	def get_file(self, sha256_hash):
		'''
		[Official] Retrieve (download) a malware sample.
		:param sha256_hash: A sha256 hash of the file to retrieve.
		:type sha256_hash: str()
		:return: A bytesIO stream
		:rtype: io.bytesIO()
		'''
		self._params['query'] = 'get_file'
		self._params['sha256_hash'] = str(sha256_hash)
		data = self._requests(raw=True)
		return data
	
	def get_infos(self, hash):
		'''
		[Official] Query a malware sample (hash)
		:param hash: SHA256, MD5 or SHA1 hash of the malware sample you want to query
		:type hash: str()
		:return: A MalwareBazaarEntry
		:rtype: MalwareBazaarEntry()
		'''
		self._params['query'] = 'get_info'
		self._params['hash'] = str(hash)
		data = self._requests()
		assert(len(data) == 1)
		return MalwareBazaarEntry(**data[0])
	
	def get_taginfo(self, tag):
		'''
		[Official]
		:param tag: Tag you want to get malware samples for
		:type tag: str()
		:return A list of MalwareBazaarEntry objects
		:rtype: list()
		'''
		self._params['query'] = 'get_taginfo'
		self._params['tag'] = str(tag)
		data = self._requests()
		return [MalwareBazaarEntry(**entry) for entry in data]
	

	def download_file(self, sha256_hash, dest, filename=None):
		'''
		[Addon] A wrapper around the get_file method to directly write the sample into a file.
		:param sha256_hash: A sha256 hash of the file to retrieve.
		:type sha256_hash: str()
		:param dest: The destination path of the file to download.
		:type dest: str()
		:param filename: The filename to use. Default will be <sha256_hash>.zip.
		:type filename: str()

		:return: None
		'''
		dataIO = self.get_file(sha256_hash)
		assert(dataIO)
		if not filename:
			fname = f'{dest}/{sha256_hash}.zip'
		else:
			fname = f'{dest}/{filename}'

		with dataIO as web_in:
			with open(fname, 'wb') as f:
				f.write(web_in.read())
		
	def _requests(self, raw=False):
		'''
		The underhood class which calls the API.
		'''
		assert(self._params)
		assert(self._headers)
		if raw :
			r = requests.post('https://mb-api.abuse.ch/api/v1/', stream=True, \
				data=self._params, timeout=15, headers=self._headers, verify=self.ssl_verify)
		else:
			r = requests.post('https://mb-api.abuse.ch/api/v1/', \
				data=self._params, timeout=15, headers=self._headers, verify=self.ssl_verify)
		# http error check
		if not r.status_code == 200:
			raise MalwareBazaarHTTPerror()
		
		# if raw data (binary)
		if raw:
			return io.BytesIO(r.content)
		
		# otherwise, return json content
		data = r.json()
		if not data['query_status'] == 'ok':
			raise MalwareBazaarResponseError()
		return data['data']

